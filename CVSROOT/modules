# Three different line formats are valid:
#	key	-a    aliases...
#	key [options] directory
#	key [options] directory files...
#
# Where "options" are composed of:
#	-i prog		Run "prog" on "cvs commit" from top-level of module.
#	-o prog		Run "prog" on "cvs checkout" of module.
#	-e prog		Run "prog" on "cvs export" of module.
#	-t prog		Run "prog" on "cvs rtag" of module.
#	-u prog		Run "prog" on "cvs update" of module.
#	-d dir		Place module in directory "dir" instead of module name.
#	-l		Top-level directory only -- do not recurse.
#
# NOTE:  If you change any of the "Run" options above, you'll have to
# release and re-checkout any working directories of these modules.
#
# And "directory" is a path to a directory relative to $CVSROOT.
#
# The "-a" option specifies an alias.  An alias is interpreted as if
# everything on the right of the "-a" had been typed on the command line.
#
# You can encode a module within a module by using the special '&'
# character to interpose another module into the current module.  This
# can be useful for creating a module that consists of many directories
# spread out over the entire source repository.
mars_mola_viewer -a mars_mola_viewer_ref \
	com/antlersoft/warroom/MapCanvas.java \
	com/antlersoft/warroom/MapTransform.java \
	com/antlersoft/warroom/DimensionsConsumer.java \
	com/antlersoft/appcontext \
	com/antlersoft/demo3d \
	com/antlersoft/util/URLFrame.java \
	humus_demos/Framework \
	humus_demos/MarsDemo \
	humus_demos/Textures/font2.dds \
	humus_demos/Textures/CubeMaps/Mars \
	humus_demos/libs

mars_mola_viewer_ref -d humus_demos/Framework/antlersoft cppquery/com/antlersoft RefObject.cpp RefObject.h RefPtr.h

cpp_home cppquery com

stdio_tunnel_ref package stdio_tunnel
stdio_tunnel_cpp_ref -d stdio_tunnel/com/antlersoft -l cppquery/com/antlersoft
stdio_tunnel_cpp2_ref -d stdio_tunnel/com/antlersoft cppquery/com/antlersoft stdio_tunnel net
stdio_tunnel -a stdio_tunnel_ref stdio_tunnel_cpp_ref stdio_tunnel_cpp2_ref
