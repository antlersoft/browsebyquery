# only the most uncontroversial elements of the query language

reserved And "and" 4 left
reserved count
reserved date
reserved deintersection 2 left
reserved execute
reserved exists
reserved expression_separator ";"
reserved first
reserved intersection 2 left
reserved list
reserved matching
reserved max
reserved min
reserved Not "not" 13 right
reserved of
reserved Or "or" 3 left
reserved previous
reserved recursive
reserved same
reserved uncorrelated
reserved union 2 left
reserved unique 5 right
reserved without 2 left
reserved Xor "xor" 3 left
reserved left_paren "("
reserved right_paren ")"

reserved LT "<" 7 left
reserved LTE "<=" 7 left
reserved ET "=" 6 left
reserved NE "!=" 6 left
reserved GTE ">=" 7 left
reserved GT ">" 8 left
reserved comma "," 9 left
reserved ampersand "&" 10 left

symbol COMPLETE_QUERY
symbol DELIMITED_QUERY
symbol FILTER
symbol GROUP_EXPRESSION
symbol GROUP_TRANSFORM
symbol RELATIONAL_OPERATOR
symbol SET_EXPRESSION
symbol SET_OPERATOR
symbol TRANSFORM
symbol VALUE_EXPRESSION
symbol VALUE_LIST

COMPLETE_QUERY : SET_EXPRESSION
"{ ((BasicBase)parser).setLastParsedExpression( (SetExpression)valueStack.get( valueStack.size()-1)); return \"\"; }" .

COMPLETE_QUERY : DELIMITED_QUERY .

DELIMITED_QUERY : SET_EXPRESSION expression_separator
"{ ((BasicBase)parser).setLastParsedExpression( (SetExpression)valueStack.get( valueStack.size()-2)); return \"\"; }" .

DELIMITED_QUERY : DELIMITED_QUERY expression_separator .

DELIMITED_QUERY : DELIMITED_QUERY SET_EXPRESSION
"{ ((BasicBase)parser).setLastParsedExpression( (SetExpression)valueStack.get( valueStack.size()-1)); return \"\"; }" .

SET_EXPRESSION : SET_EXPRESSION SET_OPERATOR SET_EXPRESSION
"{ return new SetOperatorExpression( SetOperator.getType(
((ArrayList)valueStack.get( valueStack.size()-2)).get(0).toString()),
(SetExpression)valueStack.get( valueStack.size()-3),
(SetExpression)valueStack.get( valueStack.size()-1)); }" 2 .
SET_EXPRESSION : left_paren SET_EXPRESSION right_paren
"{ return valueStack.get( valueStack.size()-2); }" .
SET_EXPRESSION : VALUE_LIST
"{ return new ValueListSetExpression( (ValueList)valueStack.get( valueStack.size()-1)); }" .
SET_EXPRESSION : execute SET_EXPRESSION "{
	return new ExecuteExpression( (SetExpression)valueStack.get(
 		valueStack.size()-1));
   }" .
SET_EXPRESSION : previous "{ return ((BasicBase)parser).getLastParsedExpression(); }" .


# Value Expression Rules
VALUE_EXPRESSION : literalString
"{ return new Constant( valueStack.get( valueStack.size()-1)); }" .
VALUE_EXPRESSION : number
"{ return new Constant( valueStack.get( valueStack.size()-1)); }" .
VALUE_EXPRESSION : GROUP_EXPRESSION
"{ return valueStack.get( valueStack.size()-1); }" .
VALUE_EXPRESSION : VALUE_EXPRESSION ampersand VALUE_EXPRESSION
"{ return new StringConcat( (ValueExpression)valueStack.get( valueStack.size()-3),
(ValueExpression)valueStack.get( valueStack.size()-1)); }" .
VALUE_EXPRESSION : FILTER
"{ return valueStack.get( valueStack.size()-1); }" 1 .
VALUE_EXPRESSION : GROUP_EXPRESSION of left_paren TRANSFORM right_paren
"{ return new GroupOfTransformExpression( (ValueExpression)valueStack.get( valueStack.size()-5),
(Transform)valueStack.get( valueStack.size()-2)); }" .
VALUE_EXPRESSION : date left_paren literalString right_paren
"{
try
{
return new Constant( DateFormat.getDateInstance().parse( (String)valueStack.get( valueStack.size()-1)));
}
catch ( java.text.ParseException pe)
{
throw new RuleActionException( pe.getMessage());
}
}" .

# ValueList rules
VALUE_LIST : left_paren right_paren
"{ return new ValueList(); }" .
VALUE_LIST : list
"{ return new ValueList(); }" .
VALUE_LIST : list VALUE_EXPRESSION
"{ return new ValueList( (ValueExpression)valueStack.get( valueStack.size()-1)); }" .
VALUE_LIST : VALUE_EXPRESSION
"{ return new ValueList( (ValueExpression)valueStack.get( valueStack.size()-1)); }" 1 .
VALUE_LIST : VALUE_LIST comma VALUE_EXPRESSION
"{ ValueList result=(ValueList)valueStack.get( valueStack.size()-3);
result.add((ValueExpression)valueStack.get( valueStack.size()-1));
return result; }" .

# Transform rules
TRANSFORM : same "{ return new SameTransform(); }" .
TRANSFORM : FILTER "{ return new FilterTransform( (Filter)valueStack.get( valueStack.size()-1)); }" 2 .

TRANSFORM : TRANSFORM SET_OPERATOR TRANSFORM "{
return new SetOperatorTransform( SetOperator.getType(
((ArrayList)valueStack.get( valueStack.size()-2)).get(0).toString()),
(Transform)valueStack.get( valueStack.size()-3),
(Transform)valueStack.get( valueStack.size()-1));
}" 3 .
TRANSFORM : left_paren TRANSFORM right_paren
"{ return valueStack.get( valueStack.size()-2); }" .
TRANSFORM : VALUE_EXPRESSION
"{ return new ValueExpressionTransform( (ValueExpression)valueStack.get(
valueStack.size()-1)); }" .
TRANSFORM : recursive TRANSFORM
"{ return new RecursiveTransform( (Transform)valueStack.get( valueStack.size()-1)); }" .
TRANSFORM : recursive TRANSFORM comma TRANSFORM
"{ return new RecursiveTransform( (Transform)valueStack.get( valueStack.size()-3),
(Transform)valueStack.get( valueStack.size()-1)); }" .
TRANSFORM : uncorrelated left_paren SET_EXPRESSION right_paren
"{ return new UncorrelatedSetTransform( (SetExpression)valueStack.get( valueStack.size()-2)); }" .
TRANSFORM : unique "{ return new UniqueTransform(); }" .

GROUP_TRANSFORM : VALUE_LIST
"{ return new ValueListGroupTransform( (ValueList)valueStack.get( valueStack.size()-1)); }" 1 .
GROUP_TRANSFORM : SET_EXPRESSION
"{ return new SetExpressionGroupTransform( (SetExpression)valueStack.get( valueStack.size()-1)); }" .

FILTER : Not FILTER
"{ Filter result=(Filter)valueStack.get(valueStack.size()-1);
result.applyNot();
return result; }" .
FILTER : exists left_paren TRANSFORM right_paren
"{ return new Exists( (Transform)valueStack.get( valueStack.size()-2)); }" .
FILTER : left_paren FILTER right_paren
"{ return valueStack.get( valueStack.size()-2); }" .
FILTER : FILTER And FILTER
"{ return new LogicalOpFilter( LogicalOpFilter.AND,
(Filter)valueStack.get( valueStack.size()-3),
(Filter)valueStack.get( valueStack.size()-1)); }" .
FILTER : FILTER Or FILTER
"{ return new LogicalOpFilter( LogicalOpFilter.OR,
(Filter)valueStack.get( valueStack.size()-3),
(Filter)valueStack.get( valueStack.size()-1)); }" .
FILTER : FILTER Xor FILTER
"{ return new LogicalOpFilter( LogicalOpFilter.XOR,
(Filter)valueStack.get( valueStack.size()-3),
(Filter)valueStack.get( valueStack.size()-1)); }" .
FILTER : VALUE_EXPRESSION RELATIONAL_OPERATOR VALUE_EXPRESSION
"{ return new RelationalFilter( ((ArrayList)valueStack.get( valueStack.size()-2)).get(0).toString(),
(ValueExpression)valueStack.get( valueStack.size()-3),
(ValueExpression)valueStack.get( valueStack.size()-1)); }" 7 .
FILTER : matching literalString
"{ return new Matches( valueStack.get( valueStack.size()-1).toString()); }" .

GROUP_EXPRESSION : count
"{ return new Count(); }" .
GROUP_EXPRESSION : first
"{ return new FirstOf(); }" .

SET_OPERATOR : union .
SET_OPERATOR : intersection .
SET_OPERATOR : deintersection .
SET_OPERATOR : without .

RELATIONAL_OPERATOR : LT .
RELATIONAL_OPERATOR : LTE .
RELATIONAL_OPERATOR : ET .
RELATIONAL_OPERATOR : NE .
RELATIONAL_OPERATOR : GTE .
RELATIONAL_OPERATOR : GT .
