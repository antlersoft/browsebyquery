#include ../../query/BasicBase.bp

symbol Identity
symbol ImportExpression
symbol Reference
symbol StringConstant
symbol Types
symbol UncalledPolymorphic

reserved Abstract "abstract"
reserved all
reserved are
reserved arguments
reserved array
reserved base
reserved by
reserved called
reserved calls
reserved Class "class"
reserved classes
reserved containing
reserved deprecated 4 right
reserved derived
reserved fields
reserved from
reserved Import "import"
reserved in
reserved is
reserved Interface "interface"
reserved methods
reserved Package "package" 4 right
reserved polymorphic
reserved Protected "protected" 4 right
reserved Private "private" 4 right
reserved Public "public" 4 right
reserved references
reserved reference
reserved referenced
reserved rightParen ")"
reserved set
reserved SetExpressionSymbol "((#1"
reserved stringconstant "string"
reserved stringconstants "strings"
reserved that
reserved to
reserved TransformSymbol "((#2"
reserved type
reserved types
reserved uncalled
reserved with
reserved write

SET_EXPRESSION : set nameSymbol to SET_EXPRESSION "{
    QueryParser qp=(QueryParser)parser;
    int size=valueStack.size();
    SetExpression se=(SetExpression)valueStack.get( size-1);
    String valueName=(String)valueStack.get( size-3);
    qp.storedValues.put( valueName, se);
	qp.storedValuesSupport.firePropertyChange( \"storedValues\", null, this);
    return se; }" 1 .

SET_EXPRESSION : set nameSymbol to TRANSFORM "{
    QueryParser qp=(QueryParser)parser;
    int size=valueStack.size();
    Transform se=(Transform)valueStack.get( size-1);
    String valueName=(String)valueStack.get( size-3);
    qp.storedValues.put( valueName, se);
	qp.storedValuesSupport.firePropertyChange( \"storedValues\", null, this);
	return new EmptySetExpression();
	}" 1 .
	
SET_EXPRESSION : VALUE_EXPRESSION SET_EXPRESSION "
	{
		int size=valueStack.size();
		return new TransformSet( new ValueExpressionTransform( (ValueExpression)valueStack.get( size-2)),
			(SetExpression)valueStack.get( size-1));
	}" .

SET_EXPRESSION : SetExpressionSymbol "{ return ((QueryParser)parser).storedValues.get( valueStack.get( valueStack.size()-1)); }" .

SET_EXPRESSION : SET_EXPRESSION that Identity FILTER "{
	int size=valueStack.size();
	return new TransformSet( new FilterTransform( (Filter)valueStack.get( size-1),
		(SetExpression)valueStack.get( size-4)));
	}" .

SET_EXPRESSION : Class literalString "{
	return new ClassGet( (String)valueStack.get( valueStack.size()-1), ((QueryParserBase)parser).importedPackages);
	}" .

SET_EXPRESSION : all classes "{
	return new ClassesGet();
	}" .

SET_EXPRESSION : all StringConstant "{
    return new StringsGet();
    }" .

SET_EXPRESSION : ImportExpression "{ return new ImportSet( ((QueryParserBase)parser).importedPackages); }" .

ImportExpression : Import .
ImportExpression : ImportExpression set "{
    ((QueryParserBase)parser).importedPackages.clear();
    return \"\";
}" .
ImportExpression : ImportExpression literalString "{
    ((QueryParserBase)parser).importedPackages.add( valueStack.get( valueStack.size()-1));
    return \"\";
}" .

SET_EXPRESSION : TRANSFORM SET_EXPRESSION
"{ return new TransformSet( (Transform)valueStack.get( valueStack.size()-2),
(SetExpression)valueStack.get( valueStack.size()-1)); }" .

TRANSFORM : VALUE_EXPRESSION TRANSFORM "
	{
		int size=valueStack.size();
		return new TransformTransform( (Transform)valueStack.get(size-1),
			new ValueExpressionTransform( (ValueExpression)valueStack.get( size-2)));
	}" .

TRANSFORM : TRANSFORM TRANSFORM
"{ return new TransformTransform( (Transform)valueStack.get( valueStack.size()-1),
(Transform)valueStack.get( valueStack.size()-2)); }" 5 .

TRANSFORM : TRANSFORM that Identity FILTER "{
	int size=valueStack.size();
	return new TransformTransform(
		(Transform)valueStack.get( size-4),
		new FilterTransform((Filter)valueStack.get( size-1)));
	};" 2 .
TRANSFORM : arguments of "{
	return new ArgumentsOf();
	}" .

TRANSFORM : recursive base classes of "{ return new RecursiveBaseClasses(); }" .
TRANSFORM : base classes of "{ return new BaseClasses(); }" .
TRANSFORM : recursive derived classes of "{ return new RecursiveDerivedClasses(); }" .
TRANSFORM : derived classes of "{ return new DerivedClasses(); }" .
TRANSFORM : methods in "{ return new MethodsIn(); }" .
TRANSFORM : fields in "{ return new FieldsIn(); }" .
TRANSFORM : polymorphic "{ return new Polymorphic(); }" .
TRANSFORM : calls from "{ return new CallsFrom(); }" .
TRANSFORM : Reference from "{ return new ReferenceFrom(); }" .
TRANSFORM : StringConstant Reference from "{ return new StringReferenceFrom(); }" .
TRANSFORM : Reference to "{ return new ReferencesTo(); }" .
TRANSFORM : calls to "{ return new CallsTo(); }" .
TRANSFORM : TransformSymbol "{ return ((QueryParser)parser).storedValues.get( valueStack.get( valueStack.size()-1)); }" .
TRANSFORM : fields with "{
	return new TransformImpl( DBField.class, DBType.class) {
		public Enumeration transformObject( DataSource source, Object to_transform)
		{
			return ((DBType)to_transform).getFields((AnalyzerDB)source);
		}
	};}" .
TRANSFORM : methods with "{
	return new TransformImpl( DBMethod.class, DBType.class) {
		public Enumeration transformObject( DataSource source, Object to_transform)
		{
			return ((DBType)to_transform).getReturningMethods((AnalyzerDB)source);
		}
	};}" .
TRANSFORM : arguments with "{
	return new TransformImpl( DBArgument.class, DBType.class) {
		public Enumeration transformObject( DataSource source, Object to_transform)
		{
			return ((DBType)to_transform).getArguments((AnalyzerDB)source);
		}
	};}" .
	

FILTER : write "{ return new WriteReferences(); }" .

FILTER : is array "{ return new IsArray(); }" .

FILTER : is reference type "{ return new IsReferenceType(); }" .

FILTER : Public "{
	return new AccessFilter( ClassWriter.ACC_PUBLIC); }" .
FILTER : Private "{
	return new AccessFilter( ClassWriter.ACC_PRIVATE); }" .
FILTER : Protected "{
	return new AccessFilter( ClassWriter.ACC_PROTECTED); }" .
FILTER : Package "{
    return new AccessFilter( ClassWriter.ACC_PUBLIC|ClassWriter.ACC_PRIVATE|
        ClassWriter.ACC_PROTECTED, 0);
    }" .
FILTER : Abstract "{ return new AccessFilter( ClassWriter.ACC_ABSTRACT); }" .
FILTER : Interface "{ return new AccessFilter( ClassWriter.ACC_INTERFACE); }" .
FILTER : deprecated "{ return new DeprecatedFilter(); }" .

FILTER : uncalled "{ return new UncalledMethod(); }" .
FILTER : UncalledPolymorphic "{ return new UncalledPolymorphic(); }" .

VALUE_EXPRESSION : Types of "{
	return new TypeOf();
	}" .

VALUE_EXPRESSION : VALUE_EXPRESSION VALUE_EXPRESSION
"{ return new CompoundExpression( (ValueExpression)valueStack.get( valueStack.size()-1),
(ValueExpression)valueStack.get( valueStack.size()-2)); }" .

VALUE_EXPRESSION : StringConstant "{
	return new StringGet();
	}" .
	
VALUE_EXPRESSION : Types "{
	return new TypeGet();
	}" .
	
VALUE_EXPRESSION : classes containing "{ return new ClassContaining(); }" .

VALUE_EXPRESSION : classes with "{ return new ClassForType(); }" .
VALUE_EXPRESSION : methods containing "{ return new MethodsContaining(); }" .
VALUE_EXPRESSION : methods called by "{ return new MethodsOf(); }" .
VALUE_EXPRESSION : fields referenced by "{ return new FieldsOf(); }" .
VALUE_EXPRESSION : StringConstant referenced by "{ return new StringsOf(); }" .
VALUE_EXPRESSION : type referenced by "{
	return new CountPreservingValueExpression( DBType.class, DBType.class) {
		public Object transformSingleObject( DataSource source, Object to_transform)
		{
			return ((DBType)to_transform).getArrayReferencedType();
		}
	};
	}" .
VALUE_EXPRESSION : methods of "{
	return new CountPreservingValueExpression( DBMethod.class, DBArgument.class) {
		public Object transformSingleObject( DataSource source, Object to_transform)
		{
			return ((DBArgument)to_transform).getMethod();
		}
	};
	}" .

Reference : reference .
Reference : references .

StringConstant : stringconstant .
StringConstant : stringconstants .

UncalledPolymorphic : uncalled polymorphic 16 .

Types : type .
Types : types .

Identity : is .
Identity : are .

