symbol SetExpression
symbol Transform
symbol CompleteQuery
symbol Filter
symbol UncalledPolymorphic
symbol Identity
symbol SetOperator
symbol Reference
symbol StringConstant
symbol LogicalOperator

reserved all
reserved and 4 left
reserved are
reserved base
reserved by
reserved called
reserved calls
reserved Class "class"
reserved classes
reserved containing
reserved count
reserved deintersection 2 left
reserved derived
reserved execute
reserved exists
reserved fields
reserved finalToken
reserved from
reserved in
reserved is
reserved intersection 2 left
reserved leftParen "("
reserved matching
reserved methodcast
reserved methods
reserved NOT "not" 5 right
reserved or 4 left
reserved of
reserved Package "package" 4 right
reserved polymorphic
reserved previous
reserved Protected "protected" 4 right
reserved Private "private" 4 right
reserved Public "public" 4 right
reserved recursive
reserved references
reserved reference
reserved referenced
reserved rightParen ")"
reserved same
reserved set
reserved stringconstant "string"
reserved stringconstants "strings"
reserved that
reserved to
reserved uncalled
reserved uncorrelated
reserved union 2 left
reserved without 2 left
reserved write

CompleteQuery : SetExpression finalToken "{
    QueryParser qp=(QueryParser)parser;
    qp.previousSet=(SetExpression)valueStack.get(valueStack.size()-2);
    return qp.previousSet;
    }" .

Identity : is .
Identity : are .

SetOperator : union "{ return union; }" .
SetOperator : intersection "{ return intersection; }" .
SetOperator : deintersection "{ return deintersection; }" .
SetOperator : without "{ return without; }" .

LogicalOperator : and "{ return and; }" .
LogicalOperator : or "{ return or; }" .

Filter : exists leftParen Transform rightParen "{
    return new Existing( (Transform)valueStack.get( valueStack.size()-2));
    }" .

Filter : Filter LogicalOperator Filter "{
    return new LogicalOpFilter( (ReservedWord)valueStack.get( valueStack.size()-2),
        (Filter)valueStack.get( valueStack.size()-3),
        (Filter)valueStack.get( valueStack.size()-1));
    }" 4 .
Filter : leftParen Filter rightParen  "{
	return (Filter)valueStack.get( valueStack.size()-2);
	}" .
Filter : NOT Filter "{
	Filter filter=(Filter)valueStack.get( valueStack.size()-1);
	filter.setNot();
	return filter;
	}" .
Filter : matching literalString "{
	return new MatchFilter( (String)valueStack.get( valueStack.size()-1));
	}" .
Filter : write "{ return new WriteReferences(); }" .

Filter : Public "{
	return new AccessFilter( ClassWriter.ACC_PUBLIC); }" .
Filter : Private "{
	return new AccessFilter( ClassWriter.ACC_PRIVATE); }" .
Filter : Protected "{
	return new AccessFilter( ClassWriter.ACC_PROTECTED); }" .
Filter : Package "{
    return new AccessFilter( ClassWriter.ACC_PUBLIC|ClassWriter.ACC_PRIVATE|
        ClassWriter.ACC_PROTECTED, 0);
    }" .
Transform : Transform Transform "{
	int size=valueStack.size();
	return new TransformTransform( (Transform)valueStack.get( valueStack.size()-2),
		(Transform)valueStack.get( valueStack.size()-1));
	}"  3 .Transform : Filter "{
	return new FilterTransform( (Filter)valueStack.get( valueStack.size()-1)); }" .
Transform : Transform SetOperator Transform "{
	int size=valueStack.size();
	return new SetOpTransform( (ReservedWord)valueStack.get( size-2),
		(Transform)valueStack.get( size-3), (Transform)valueStack.get( size-1));
	}" 2 .
Transform : Transform that Identity Filter "{
	int size=valueStack.size();
	return new TransformTransform(
		new FilterTransform((Filter)valueStack.get( valueStack.size()-1)),
		(Transform)valueStack.get( valueStack.size()-4));
	};" .
Transform : leftParen Transform rightParen "{
	return (Transform)valueStack.get( valueStack.size()-2);
	}" .
Transform : count "{ return new Count(); }" .

Transform : uncorrelated leftParen SetExpression rightParen "{
	return new UncorrelatedSet( (SetExpression)
            valueStack.get( valueStack.size()-2));
	}" .

SetExpression : Transform SetExpression "{
	int size=valueStack.size();
	return new TransformSet( (SetExpression)valueStack.get( size-1),
		(Transform)valueStack.get( size-2));
	}" 3 .

SetExpression : execute SetExpression "{
	return new ExecuteExpression( (SetExpression)valueStack.get(
 		valueStack.size()-1));
   }" .

SetExpression : leftParen SetExpression rightParen "{
	return (SetExpression)valueStack.get( valueStack.size()-2);
	}" .

SetExpression : SetExpression that Identity Filter "{
	int size=valueStack.size();
	return new TransformSet( (SetExpression)valueStack.get( size-4),
		new FilterTransform( (Filter)valueStack.get( size-1)));
	}" .

SetExpression : SetExpression SetOperator SetExpression "{
	int size=valueStack.size();
	return new SetOpExpression( (ReservedWord)valueStack.get( size-2),
		(SetExpression)valueStack.get( size-3), (SetExpression)valueStack.get( size-1));
	}" 2 .

SetExpression : previous "{
	QueryParser qp=(QueryParser)parser;
	return qp.previousSet;
	}" .

SetExpression : Class literalString "{
	return new ClassGet( (String)valueStack.get( valueStack.size()-1));
	}" .

SetExpression : all classes "{
	return new ClassesGet();
	}" .

SetExpression : all StringConstant "{
    return new StringsGet();
    }" .

SetExpression : stringconstant literalString "{
	return new StringGet( (String)valueStack.get( valueStack.size()-1));
	}" .

Transform : base classes of "{ return new BaseClasses(); }" .
Transform : recursive base classes of "{ return new RecursiveBaseClasses(); }" .
Transform : derived classes of "{ return new DerivedClasses(); }" .
Transform : recursive derived classes of "{ return new RecursiveDerivedClasses(); }" .
Transform : same "{ return new SameTransform(); }" .
Transform : methods in "{ return new MethodsIn(); }" .
Transform : fields in "{ return new FieldsIn(); }" .
Transform : polymorphic "{ return new Polymorphic(); }" .
Transform : methods called by "{ return new MethodsOf(); }" .
Transform : fields referenced by "{ return new FieldsOf(); }" .
Transform : StringConstant referenced by "{ return new StringsOf(); }" .
Transform : methods containing "{ return new MethodsContaining(); }" .
Transform : classes containing "{ return new ClassOf(); }" .
Filter : uncalled "{ return new UncalledMethod(); }" .
Filter : UncalledPolymorphic "{ return new UncalledPolymorphic(); }" .
Reference : reference .
Reference : references .
StringConstant : stringconstant .
StringConstant : stringconstants .
Transform : calls from "{ return new CallsFrom(); }" .
Transform : Reference from "{ return new ReferenceFrom(); }" .
Transform : StringConstant Reference from "{ return new StringReferenceFrom(); }" .
Transform : Reference to "{ return new ReferencesTo(); }" .
Transform : calls to "{ return new CallsTo(); }" .
UncalledPolymorphic : uncalled polymorphic .
SetExpression : set nameSymbol to SetExpression "{
    QueryParser qp=(QueryParser)parser;
    int size=valueStack.size();
    SetExpression se=(SetExpression)valueStack.get( size-1);
    String valueName=(String)valueStack.get( size-3);
    qp.storedValues.put( valueName, se);
	qp.storedValuesSupport.firePropertyChange( \"storedValues\", null, this);
    return se; }" 1 .
SetExpression : nameSymbol "{ QueryParser qp=(QueryParser)parser;
    SetExpression retVal=(SetExpression)qp.storedValues.get(
	    valueStack.get( valueStack.size()-1));
    if ( retVal==null)
	    throw new RuleActionException( \"Unknown_name:\"+valueStack.get( valueStack.size()-1));
    return retVal; }" .
