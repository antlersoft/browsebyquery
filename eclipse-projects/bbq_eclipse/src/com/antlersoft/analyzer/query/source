symbol SetExpression
symbol Transform
symbol CompleteQuery
symbol Filter
symbol UncalledPolymorphic
symbol Identity
symbol MethodExpression
symbol SetOperator
symbol Reference
reserved all
reserved and
reserved are
reserved base
reserved by
reserved called
reserved calls
reserved Class "class"
reserved classes
reserved containing
reserved deintersection
reserved derived
reserved execute
reserved fields
reserved finalToken
reserved from
reserved in
reserved is
reserved intersection
reserved leftParen "("
reserved matching
reserved methodcast
reserved methods
reserved NOT "not"
reserved or
reserved of
reserved polymorphic
reserved previous
reserved recursive
reserved references
reserved reference
reserved referenced
reserved rightParen ")"
reserved same
reserved set
reserved that
reserved to
reserved uncalled
reserved union
reserved without
reserved write

CompleteQuery : SetExpression finalToken "{
    QueryParser qp=(QueryParser)parser;
    qp.previousSet=(SetExpression)valueStack.get(valueStack.size()-2);
    return qp.previousSet;
    }" .

Identity : is .
Identity : are .

SetOperator : union "{ return union; }" .
SetOperator : intersection "{ return intersection; }" .
SetOperator : deintersection "{ return deintersection; }" .
SetOperator : without "{ return without; }" .

Filter : Filter and Filter .
Filter : leftParen Filter rightParen  "{
	return (Filter)valueStack.get( valueStack.size()-2);
	}" .
Filter : Filter or Filter .
Filter : NOT Filter "{
	Filter filter=(Filter)valueStack.get( valueStack.size()-1);
	filter.setNot();
	return filter;
	}" .
Filter : matching literalString "{
	return new MatchFilter( (String)valueStack.get( valueStack.size()-1));
	}" .
Filter : write "{ return new WriteReferences(); }" .
Transform : Transform Transform "{
	int size=valueStack.size();
	return new TransformTransform( (Transform)valueStack.get( valueStack.size()-2),
		(Transform)valueStack.get( valueStack.size()-1));
	}" .
Transform : Filter "{
	return new FilterTransform( (Filter)valueStack.get( valueStack.size()-1)); }" .
Transform : Transform SetOperator Transform "{
	int size=valueStack.size();
	return new SetOpTransform( (ReservedWord)valueStack.get( size-2),
		(Transform)valueStack.get( size-3), (Transform)valueStack.get( size-1));
	}" .
Transform : Transform that Identity Filter "{
	int size=valueStack.size();
	return new TransformTransform(
		new FilterTransform((Filter)valueStack.get( valueStack.size()-1)),
		(Transform)valueStack.get( valueStack.size()-4));
	};" .
Transform : leftParen Transform rightParen  "{
	return (Transform)valueStack.get( valueStack.size()-2);
	}" .

SetExpression : Transform SetExpression "{
	int size=valueStack.size();
	return new TransformSet( (SetExpression)valueStack.get( size-1),
		(Transform)valueStack.get( size-2));
	}" .

SetExpression : execute SetExpression .

SetExpression : leftParen SetExpression rightParen "{
	return (SetExpression)valueStack.get( valueStack.size()-2);
	}" .

SetExpression : SetExpression that Identity Filter "{
	int size=valueStack.size();
	return new TransformSet( (SetExpression)valueStack.get( size-4),
		new FilterTransform( (Filter)valueStack.get( size-1)));
	}" .

SetExpression : SetExpression SetOperator SetExpression "{
	int size=valueStack.size();
	return new SetOpExpression( (ReservedWord)valueStack.get( size-2),
		(SetExpression)valueStack.get( size-3), (SetExpression)valueStack.get( size-1));
	}" .

SetExpression : previous "{
	QueryParser qp=(QueryParser)parser;
	return qp.previousSet;
	}" .

SetExpression : Class literalString "{
	return new ClassGet( (String)valueStack.get( valueStack.size()-1));
	}" .

SetExpression : all classes "{
	return new ClassesGet();
	}" .

Transform : base classes of "{ return new BaseClasses(); }" .
Transform : recursive base classes of "{ return new RecursiveBaseClasses(); }" .
Transform : derived classes of "{ return new DerivedClasses(); }" .
Transform : recursive derived classes of "{ return new RecursiveDerivedClasses(); }" .
Transform : same "{ return new SameTransform(); }" .
Transform : methods in "{ return new MethodsIn(); }" .
Transform : fields in "{ return new FieldsIn(); }" .
Transform : polymorphic "{ return new Polymorphic(); }" .
Transform : methods called by "{ return new MethodsOf(); }" .
Transform : fields referenced by "{ return new FieldsOf(); }" .
Transform : methods containing "{ return new MethodsContaining(); }" .
Transform : classes containing "{ return new ClassOf(); }" .
Filter : uncalled "{ return new UncalledMethod(); }" .
Transform : UncalledPolymorphic "{ return new UncalledPolymorphic(); }" .
Reference : reference .
Reference : references .
Transform : calls from "{ return new CallsFrom(); }" .
Transform : Reference from "{ return new ReferenceFrom(); }" .
Transform : Reference to "{ return new FieldReferencesTo(); }" .
Transform : calls to "{ return new CallsTo(); }" .
UncalledPolymorphic : uncalled polymorphic .
SetExpression : set nameSymbol to SetExpression "{
    QueryParser qp=(QueryParser)parser;
    int size=valueStack.size();
    SetExpression se=(SetExpression)valueStack.get( size-1);
    String valueName=(String)valueStack.get( size-3);
    qp.storedValues.put( valueName, se);
	qp.storedValuesSupport.firePropertyChange( \"storedValues\", null, this);
//System.out.println( qp.storedValuesSupport.hasListeners( \"storedValues\") ? \"Has listeners\" : \"No listeners\");
    return se; }" .
SetExpression : nameSymbol "{ QueryParser qp=(QueryParser)parser;
    SetExpression retVal=(SetExpression)qp.storedValues.get(
	    valueStack.get( valueStack.size()-1));
    if ( retVal==null)
	    throw new RuleActionException( \"Unknown name: \"+valueStack.get( valueStack.size()-1));
    return retVal; }" .

MethodExpression : SetExpression methodcast "{
	parser.clearRecovery();
    return (SetExpression)valueStack.get(valueStack.size()-2);
    }" .

SetExpression : SetExpression errorSymbol "{
	SetExpression oe=(SetExpression)valueStack.get( valueStack.size()-2);
	((QueryParser)parser).pushCastToken( oe);
	return oe;
	}" .
