package com.antlersoft.analyzer.query;

import java.text.DateFormat;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import com.antlersoft.analyzer.*;

import com.antlersoft.bbq.db.*;
import com.antlersoft.bbq.query.*;

import com.antlersoft.classwriter.ClassWriter;

import com.antlersoft.parser.GotoRule;
import com.antlersoft.parser.Parser;
import com.antlersoft.parser.ParseState;
import com.antlersoft.parser.ReduceRule;
import com.antlersoft.parser.ReservedScope;
import com.antlersoft.parser.RuleAction;
import com.antlersoft.parser.RuleActionException;
import com.antlersoft.parser.ShiftRule;
import com.antlersoft.parser.Symbol;
import com.antlersoft.parser.Token;
import com.antlersoft.parser.ValueStack;

import com.antlersoft.query.*;

import com.antlersoft.query.environment.AnalyzerQuery;
import com.antlersoft.query.environment.ImportSet;
import com.antlersoft.query.environment.QueryLanguageEnvironment;
import com.antlersoft.query.environment.SavingName;

import com.antlersoft.util.IteratorEnumeration;

public class QueryParser extends QueryParserBase
{
    // Public interface
	public QueryParser()
	{
		super( parseStates);
	}
	
	/**
 	 * Change a nameSymbol token to an appropriate type for the named object
 	 */
    public void massageToken( Token token)
    {
    	if ( token.symbol==nameSymbol && ! nameSymbolExpected())
    	{
    		String name=token.value;
    		Object o=((QueryLanguageEnvironment)getParserEnvironment()).getStoredValue( name);
    		if ( o instanceof Transform)
    		{
    			token.symbol=TransformSymbol;
    		}
    		else if ( o instanceof SetExpression)
    		{
    			token.symbol=SetExpressionSymbol;
    		}
    	}
    }

    private final boolean nameSymbolExpected()
    {
    	for ( Enumeration e=getExpectedSymbols(); e.hasMoreElements();)
    	{
    		if ( e.nextElement()==nameSymbol)
    			return true;
    	}
    	return false;
    }

	private static final ReservedScope reservedScope=new ReservedScope();
	public ReservedScope getReservedScope() { return reservedScope; }
	
// Include output here
